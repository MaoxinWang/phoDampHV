function [rho50,sigma_z] = rho_SA_PGV(input_T,input_Damp,typePair)

% Created by Mao-Xin Wang (maoxin_wang@hotmail.com or maoxin.wang@polyu.edu.hk)
% July 2023
%
% Predict correlation coefficient between H-H, H-V, or V-V pair of [SA,PGV]
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUT
%
%   input_T      = scalar or matrix of inputted period values (in units of s)
%   input_Damp   = scalar or matrix of inputted damping ratio values
%       (the above inputs must be in the same dimension)
%   typePair     = 'H-H' representing horizontal-horizontal SA-PGV correlation
%                = 'H-V' representing horizontal-vertical SA-PGV correlation
%                = 'V-H' representing vertical-horizontal SA-PGV correlation
%                = 'V-V' representing vertical-vertical SA-PGV correlation
%
% OUTPUT
%
%   rho50        = median correlation coefficient
%   sigma_z      = standard deviation of the z variable
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

X_min = [-4.605 	-0.693];
X_max = [2.303 	3.401];

%% specify model coefficients
switch typePair
    case 'H-H'
        W = [
            -5.681 	-8.484 	-14.412 	-3.976 	-14.960 	-3.397 	-3.928 	-4.314 	-4.397 	-6.965 	1.711 	2.866 	3.324 	-0.670 	0.504 	5.032 	5.122 	2.171 	3.198 	7.544 	10.560 	1.596 	2.598 	9.839 	12.787 	6.875
            -1.246 	0.310 	0.164 	0.445 	0.712 	-0.185 	-0.259 	0.353 	0.398 	0.273 	-0.377 	-0.574 	-0.359 	-0.913 	0.143 	0.182 	-0.048 	-0.642 	-0.432 	-0.084 	-0.280 	0.234 	0.052 	0.931 	0.959 	0.966
            ];
        W_prime = [
            0.002 	0.000 	0.011 	0.242 	-0.004 	1.956 	-0.843 	-0.647 	0.529 	-0.065 	0.134 	0.102 	-1.776 	-0.044 	-0.188 	0.026 	0.117 	-0.031 	0.785 	-0.017 	-0.015 	0.223 	1.865 	0.090 	-0.078 	-0.020
            0.762 	-0.422 	0.690 	3.021 	0.632 	2.062 	-2.141 	5.271 	1.431 	5.545 	2.313 	2.285 	1.527 	0.233 	2.571 	1.819 	2.243 	0.297 	2.702 	1.528 	2.726 	4.632 	-2.259 	-5.494 	3.159 	3.362
            ];
        b = [
            1.523 	-4.458 	0.618 	-0.625 	3.864 	-1.807 	-2.223 	2.350 	-1.897 	5.458 	-1.840 	0.367 	-1.926 	0.922 	1.290 	-0.303 	1.782 	1.678 	-1.910 	-4.734 	-8.219 	-1.970 	1.022 	-2.783 	-3.676 	-1.908
            ];
        b_prime = [1.018 	-0.730];
    case 'H-V'
        W = [
            12.789 	-5.187 	2.634 	2.183 	4.457 	2.114 	-16.683 	-4.396 	-9.979 	8.262 	12.295 	1.494 	-9.420 	-3.571 	-11.818 	3.406 	9.018 	-5.194 	0.487 	-0.208 	2.726 	-4.609 	2.725 	2.842
            0.340 	-0.029 	-0.439 	0.499 	0.126 	-0.407 	-0.029 	0.033 	0.416 	0.212 	0.235 	-0.486 	-0.115 	0.367 	-0.173 	0.122 	-0.316 	0.260 	-0.436 	0.653 	-0.310 	0.297 	-0.145 	0.544
            ];
        W_prime = [
            -0.101 	-0.064 	0.123 	0.254 	-0.364 	-0.577 	-0.023 	0.161 	-0.140 	0.207 	0.062 	0.497 	0.176 	0.738 	0.022 	0.433 	0.172 	0.201 	-0.831 	-0.222 	1.441 	0.457 	0.103 	-0.097
            3.562 	1.666 	-1.363 	2.623 	7.448 	2.414 	-0.167 	-2.146 	-1.739 	-8.491 	4.867 	-2.105 	8.790 	-2.159 	0.808 	-2.908 	3.812 	-1.756 	2.489 	0.496 	-6.964 	8.494 	10.485 	-2.848
            ];
        b = [
            -3.226 	-4.053 	-0.787 	-2.096 	-0.790 	1.217 	-5.356 	-3.529 	5.074 	-2.021 	-7.428 	-2.093 	5.668 	-1.582 	0.308 	-0.172 	-5.786 	-3.405 	-1.147 	0.819 	1.524 	2.711 	-1.477 	-2.725
            ];
        b_prime = [0.518 	-2.798];
    case 'V-H'
        W = [
            8.831 	10.509 	-9.923 	-7.197 	-1.191 	-2.941 	8.198 	-3.371 	0.239 	-5.959 	-2.395 	7.170 	-0.413 	-0.602 	9.792 	3.332 	4.887 	3.713 	7.026 	-6.834 	9.318 	7.534 	7.938 	13.475 	6.813 	15.250
            0.028 	-0.280 	0.214 	0.208 	0.427 	0.612 	0.110 	0.297 	0.569 	-0.686 	-0.119 	-0.313 	-0.685 	-0.400 	-0.280 	-0.108 	-0.132 	-0.055 	-0.161 	-0.092 	0.049 	-0.211 	0.143 	-0.331 	-0.086 	0.178
            ];
        W_prime = [
            -0.762 	0.386 	1.595 	1.357 	0.072 	0.121 	0.712 	0.219 	-0.027 	-0.048 	-0.403 	0.146 	0.052 	-0.141 	-0.416 	-0.779 	0.805 	-0.917 	1.464 	-1.242 	-1.638 	1.227 	0.592 	0.595 	0.228 	0.424
            3.026 	-2.324 	6.147 	-1.072 	0.861 	0.576 	-2.217 	1.526 	-2.643 	-0.521 	-0.852 	-0.618 	-1.518 	3.171 	2.398 	-4.794 	1.610 	-0.596 	-0.841 	0.212 	4.540 	2.130 	5.165 	3.753 	2.206 	-2.151
            ];
        b = [
            -1.333 	1.834 	5.712 	-4.180 	0.455 	-1.538 	-1.271 	-3.280 	0.444 	4.912 	-0.527 	-1.464 	-0.538 	2.090 	1.673 	-1.869 	4.263 	3.081 	4.058 	3.010 	-3.871 	-3.964 	-9.303 	-7.935 	-4.599 	-6.213
            ];
        b_prime = [1.304 	-0.619];
    case 'V-V'
        W = [
            3.071 	0.738 	-8.847 	-4.587 	3.962 	-0.379 	-3.800 	1.394 	7.652 	7.437 	3.812 	4.587 	3.690 	7.550 	3.824 	9.798 	-14.524 	5.497 	6.048 	4.967 	4.266 	9.754 	9.258 	-0.165 	-4.937 	-7.105 	-10.008 	3.955
            -0.303 	0.508 	0.181 	0.965 	0.805 	0.227 	1.115 	0.277 	-0.168 	-0.873 	0.584 	0.291 	0.191 	0.194 	0.320 	-0.444 	-0.246 	-0.555 	-0.126 	-0.084 	-1.056 	-0.149 	0.227 	-0.331 	0.282 	0.661 	0.248 	-0.339
            ];
        W_prime = [
            1.434 	-0.541 	0.456 	0.322 	-0.100 	1.725 	0.140 	0.861 	-2.672 	-0.025 	0.082 	0.424 	0.272 	0.069 	-0.145 	-0.028 	-0.148 	-0.079 	3.861 	-2.235 	0.417 	0.512 	-0.454 	0.945 	-0.417 	0.012 	-0.689 	-1.303
            -1.367 	3.023 	1.958 	1.333 	0.546 	-1.248 	1.008 	-4.849 	5.979 	2.223 	0.384 	-4.870 	0.350 	2.618 	3.624 	2.131 	3.321 	2.479 	-2.888 	-1.163 	2.311 	1.622 	7.909 	-0.609 	6.862 	3.525 	2.164 	1.307
            ];
        b = [
            1.936 	-1.866 	-4.846 	-1.341 	-2.172 	-0.310 	-1.054 	-1.199 	-0.775 	-5.210 	-0.248 	-2.668 	1.407 	-2.694 	-3.165 	-3.330 	8.962 	-2.921 	-0.871 	-1.056 	1.194 	5.313 	-5.552 	-0.112 	2.114 	4.858 	0.708 	2.419
            ];
        b_prime = [0.913 	-1.918];
end

%% predict median correlation coefficient and standard deviation
% ensure predictors are in vector form
[n_row,n_col] = size(input_T);
n_data = n_row*n_col;
x_T = reshape(input_T,n_data,1);
x_Damp = 100*reshape(input_Damp,n_data,1);

% normalize predictors (equation 10)
X_norm = 2*(log([x_T,x_Damp])-repmat(X_min,[n_data,1]))./(repmat(X_max-X_min,[n_data,1]))-1;

% make prediction using ANN (equation 12)
Y = (2./(1+exp(-2*(X_norm*W+repmat(b,[n_data,1]))))-1)*W_prime'+repmat(b_prime,[n_data,1]);

% make dimension of outputs consistent with that of inputs
rho50 = reshape(Y(:,1),n_row,n_col);
sigma_z = reshape(exp(Y(:,2)),n_row,n_col);

